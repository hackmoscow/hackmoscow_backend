import datetime
import enum
import random
from sqlalchemy import Column, Integer, String, Text, ForeignKey, DateTime, Enum, func
from geoalchemy2 import Geometry
from sqlalchemy.orm import relationship, backref
from flask_login import UserMixin
from utils import geo
from .base import Base


class Message(Base):
    __tablename__ = 'messages'
    id = Column(Integer, primary_key=True)
    text = Column(Text)
    thread_id = Column(Integer, ForeignKey("threads.id"), nullable=False)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)
    user = relationship("User")


class Thread(Base):
    __tablename__ = 'threads'
    id = Column(Integer, primary_key=True)
    name = Column(String())
    location = Column(Geometry('POINT'))  # lat lon
    messages = relationship('Message', backref=backref("thread_messages"), order_by=Message.created_at.desc())
    likes = relationship('Like', backref=backref("thread_likes"))
    dislikes = relationship('Dislike', backref=backref("thread_dislikes"))
    created_at = Column(DateTime, default=datetime.datetime.utcnow)

    def like(self, session, user):
        for like in self.likes:
            if like.thread == self and like.user == user:
                session.delete(like)
                return None  # unlike
        like = Like()
        like.thread = self
        like.user = user
        session.add(like)
        self.likes.append(like)
        session.add(self)
        for dislike in self.dislikes:
            if dislike.thread == self and dislike.user == user:
                session.delete(dislike)
        session.commit()
        return like

    def dislike(self, session, user):
        for dislike in self.dislikes:
            if dislike.thread == self and dislike.user == user:
                session.delete(dislike)
                return None  # undislike
        dislike = Dislike()
        dislike.thread = self
        dislike.user = user
        session.add(dislike)
        self.dislikes.append(dislike)
        session.add(self)
        for like in self.likes:
            if like.thread == self and like.user == user:
                session.delete(like)
        session.commit()
        return dislike

    @classmethod
    def get_near_location(cls, session, lat, lon, max_distance):
        geometry = geo.make_point_geometry(lat, lon)
        threads = session.query(cls).filter(func.ST_DWithin(cls.location, geometry, max_distance)).all()
        return threads


class Like(Base):
    __tablename__ = 'likes'
    id = Column(Integer, primary_key=True)
    thread_id = Column(Integer, ForeignKey("threads.id"), nullable=False)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)
    thread = relationship("Thread")
    user = relationship("User")


class Dislike(Base):
    __tablename__ = 'dislikes'
    id = Column(Integer, primary_key=True)
    thread_id = Column(Integer, ForeignKey("threads.id"), nullable=False)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)
    thread = relationship("Thread")
    user = relationship("User")


adjectives = [
    "абсолютный", "адский", "азартный", "активный", "ангельский", "антагонистический", "арктический", "астрономический",
    "баснословный", "безапелляционный", "безбожный", "безбрежный", "безвозвратный", "безграничный", "бездонный",
    "бездушный", "безжалостный", "беззаветный", "беззастенчивый", "безмерный", "безмятежный", "безнадежный",
    "безоговорочный", "безотлагательный", "безраздельный", "безрассудный", "безропотный", "безудержный",
    "безукоризненный", "безумный", "безупречный", "безусловный", "безустанный", "безутешный", "безысходный",
    "белоснежный", "бескомпромиссный", "бесконечный", "беспардонный", "бесповоротный", "беспощадный", "беспредельный",
    "беспрекословный", "беспрецедентный", "беспримерный", "беспробудный", "беспроглядный", "беспросветный",
    "беспросыпный", "бессовестный", "бесстыдный", "бесценный", "бесчеловечный", "бесчисленный", "бесшабашный",
    "бешеный", "блестящий", "богатый", "богатырский", "большой", "буйный", "бурный", "варварский", "великий",
    "величайший", "веский", "весомый", "внушительный", "возмутительный", "волчий", "вопиющий", "восторженный",
    "впечатляющий", "всемерный", "всепоглощающий", "всесильный", "всесторонний", "всяческий", "выдающийся", "вылитый",
    "высокий", "высший", "галопирующий", "гибельный", "гигантский", "глубокий", "глубочайший", "глухой",
    "головокружительный", "гомерический", "горький", "горючий", "горячий", "грандиозный", "гробовой", "грозный",
    "громадный", "громкий", "громоподобный", "грубый", "густой", "диаметральный", "дивный", "дикий", "добрый",
    "доскональный", "дотошный", "дремучий", "душераздирающий", "дьявольский", "жаркий", "жгучий", "железный", "жесткий",
    "жестокий", "жесточайший", "живой", "животный", "жизненный", "жуткий", "завзятый", "завидный", "закадычный",
    "заклятый", "законченный", "закоренелый", "замечательно", "замечательный", "записной", "запредельный", "заядлый",
    "звериный", "зверский", "зеленый", "злой", "злостный", "значительный", "идеальный", "излишний", "изрядный",
    "изуверский", "изумительный", "исключительный", "исполинский", "исступленный", "истинно", "истинный", "истовый",
    "истошный", "исчерпывающий", "каменный", "кардинальный", "катастрофический", "категорический", "клятвенный",
    "колоссальный", "коренной", "космический", "крайний", "крепкий", "кристальный", "кричащий", "кровный", "кромешный",
    "круглый", "крупный", "крутой", "леденящий", "лошадиный", "лютый", "максимальный", "массовый", "маститый",
    "матерый", "махровый", "мертвенно", "мертвенный", "мертвецкий", "мертвый", "мировой", "могильный", "могучий",
    "молниеносный", "мощный", "мучительный", "набитый", "наглый", "наглядный", "надежный", "надрывный", "наибольший",
    "наивысший", "нарочитый", "настоятельный", "настоящий", "насущный", "небывалый", "невероятный", "невиданный",
    "невозможный", "невообразимый", "невосполнимый", "невыносимый", "невыразимый", "недопустимый", "недосягаемый",
    "недюжинный", "незабываемый", "незаурядный", "неземной", "неизбывный", "неизмеримый", "неимоверный", "неиссякаемый",
    "неистовый", "неистощимый", "неистребимый", "неисходный", "неисчерпаемый", "неисчислимый", "немаловажный",
    "немалый", "немилосердный", "немой", "немыслимый", "ненасытный", "необоримый", "необузданный", "необыкновенный",
    "необычайный", "неограниченный", "неодолимый", "неописуемый", "неопровержимый", "неоспоримый", "неотразимый",
    "неоценимый", "непередаваемый", "непереносимый", "непобедимый", "неповторимый", "непогрешимый", "неподдельный",
    "непоколебимый", "непомерный", "непоправимый", "непостижимый", "непревзойденный", "непреоборимый", "непреодолимый",
    "непререкаемый", "непримиримый", "непробиваемый", "непробудный", "непроглядный", "непролазный", "непроходимый",
    "неразрывный", "нерасторжимый", "несгибаемый", "несказанный", "неслыханный", "несметный", "несмолкаемый",
    "несмываемый", "несокрушимый", "несравненный", "нестерпимый", "несусветный", "неудержимый", "неуемный",
    "неуклонный", "неукоснительный", "неукротимый", "неумеренный", "неустанный", "неусыпный", "неутешный", "неутолимый",
    "неутомимый", "нечеловеческий", "нешуточный", "нещадный", "обильный", "обложной", "образцовый", "оглушительный",
    "огромный", "ожесточенный", "олимпийский", "ослепительный", "ослиный", "основательный", "остервенелый", "острый",
    "отборный", "откровенный", "открытый", "отличный", "отменный", "отпетый", "отчаянный", "отъявленный",
    "ошеломляющий", "панический", "патологический", "первейший", "первоклассный", "первый", "пламенный", "плотный",
    "площадной", "повальный", "поголовный", "подавляющий", "подлинный", "подчеркнутый", "полнейший", "полный",
    "поразительный", "порядочный", "последний", "потрясающий", "предельный", "преклонный", "преступный", "приличный",
    "принципиальный", "прирожденный", "прожженный", "проливной", "пронзительный", "пронизывающий", "прямой", "пущий",
    "пьянящий", "рабский", "радикальный", "разгромный", "раздирающий", "разительный", "разящий", "райский",
    "ревностный", "революционный", "редкий", "редкостный", "резкий", "рекордный", "решительный", "рьяный",
    "сатанинский", "сверхчеловеческий", "сверхъестественный", "свинцовый", "свирепый", "седой", "сердитый", "серьезный",
    "сильный", "сказочно", "сказочный", "слепой", "смертельный", "смертный", "сногсшибательный", "собачий",
    "совершеннейший ", "совершенный", "сокрушительный", "солидный", "сплошной", "стальной", "стоический", "стойкий",
    "стопроцентный", "страстный", "страшный", "строгий", "строжайший", "сумасшедший", "суровый", "существенный",
    "сущий", "твердый", "телячий", "титанический", "тотальный", "трескучий", "триумфальный", "тяжелый", "тяжкий",
    "убедительный", "убежденный", "убийственный", "уважительный", "удивительный", "ужасающий", "ужасный",
    "умопомрачительный", "уничтожающий", "фанатический", "фанатичный", "фантастический", "феноменальный", "филигранный",
    "форменный", "фундаментальный", "хороший", "царский", "цепенящий", "черный", "чертов", "чертовский", "чистый",
    "чрезвычайный", "чрезмерный", "чудовищный", "широкий", "широкомасштабный", "шквальный", "штормовой", "шумный",
    "щедрый", "щемящий", "экстраординарный", "экстремальный", "ювелирный", "ядреный", "яркий", "яростный", "ярый"
]
animals = [
    'слон', 'кракен', 'неотопырь', 'октокэт', 'программист', 'осетр', 'голубь', 'стегозавр', 'крокодил',
]


def default_name(user):
    return f'{random.choice(adjectives)} {random.choice(animals)}'.lower().capitalize()


class User(UserMixin, Base):
    __tablename__ = 'users'

    def __init__(self, **kwargs):
        super(User, self).__init__(**kwargs)
        if self.name not in kwargs:
            self.name = self.__table__.c.name.default.arg(self)

    id = Column(Integer, primary_key=True)
    password = Column(String, unique=True, nullable=False)
    name = Column(String, nullable=True, default=default_name)

    def __repr__(self):
        return self.password
